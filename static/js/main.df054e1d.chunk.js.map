{"version":3,"sources":["YearFact.js","NumberFact.js","DayMonthFact.js","AppInputForm.js","App.js","serviceWorker.js","index.js"],"names":["YearFact","className","htmlFor","value","this","props","userInput","type","name","id","placeholder","onChange","handleInput","onClick","e","handleClick","Component","NumberFact","DayMonthFact","AppInputForm","handleYearCheck","setState","yearIsChecked","dayMonthIsChecked","numberIsChecked","userFact","handleDayMonthCheck","handleNumberCheck","target","preventDefault","urlCallValue","state","match","dayMonthPattern","axios","url","dataType","method","params","reqUrl","xmlToJSON","then","res","data","catch","alert","App","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","console","message"],"mappings":"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","file":"static/js/main.df054e1d.chunk.js","sourcesContent":["import React, {Component} from 'react';\n\nclass YearFact extends Component {\n    render() {\n        return (\n            <form className=\"animate\">\n                <label htmlFor=\"yearInput\" className=\"sr-only\">Year input</label>\n                <input value={this.props.userInput} className=\"userInput\" type=\"text\" name=\"yearInput\" id=\"yearInput\" placeholder=\"Enter a year (YYYY)\" onChange={this.props.handleInput}/>\n                <button type=\"submit\" onClick={(e) => this.props.handleClick(e)}>Submit</button>\n            </form>\n        )\n    }\n}\n\nexport default YearFact","import React, {Component} from 'react';\n\nclass NumberFact extends Component {\n    render() {\n        return (\n            <form className=\"animate\">\n                <label htmlFor=\"numberInput\" className=\"sr-only\">Number input</label>\n                <input value={this.props.userInput} className=\"userInput\" type=\"text\" name=\"numberInput\" id=\"numberInput\" placeholder=\"Enter a number\" onChange={this.props.handleInput}/>\n                <button type=\"submit\" onClick={(e) => this.props.handleClick(e)}>Submit</button>\n            </form>\n        )\n    }\n}\n\nexport default NumberFact","import React, {Component} from 'react';\n\nclass DayMonthFact extends Component {\n\n    render() {\n        return (\n            <form className=\"animate\">\n                <label htmlFor=\"dayMonthInput\" className=\"sr-only\">Day and month input</label>\n                <input value={this.props.userInput} className=\"userInput\" type=\"text\" name=\"dayMonthInput\" id=\"dayMonthInput\" placeholder=\"Enter a date (MM/DD)\" onChange={this.props.handleInput}/>\n                <button type=\"submit\" onClick={(e) => this.props.handleClick(e)}>Submit</button>\n            </form>\n        )\n    }\n}\n\nexport default DayMonthFact","import React, {Component, Fragment} from 'react';\nimport YearFact from './YearFact.js'\nimport NumberFact from './NumberFact.js'\nimport DayMonthFact from './DayMonthFact.js'\nimport axios from 'axios';\n\nclass AppInputForm extends Component {\n    \n    constructor() {\n        super();\n        // initial state values\n        this.state = {\n            userInput: '',\n            userFact: '',\n            yearIsChecked: false,\n            dayMonthIsChecked: false,\n            numberIsChecked: false,\n            dayMonthPattern: /(0[1-9]|1[0-2])\\/(0[1-9]|[12]\\d|3[01])/\n        }\n    }\n\n    // check which options was selected by user\n    handleYearCheck = () => {\n        this.setState({\n            yearIsChecked: true,\n            dayMonthIsChecked: false,\n            numberIsChecked: false,\n            userFact: ''\n        })\n    }\n\n    handleDayMonthCheck = () => {\n        this.setState({\n            yearIsChecked: false,\n            dayMonthIsChecked: true,\n            numberIsChecked: false,\n            userFact: ''\n        })\n    }\n\n    handleNumberCheck = () => {\n        this.setState({\n            yearIsChecked: false,\n            dayMonthIsChecked: false,\n            numberIsChecked: true,\n            userFact: '',\n        })\n    }\n    \n    // update the user input state value\n    handleInput = (e) => {\n        this.setState({\n            userInput: e.target.value,\n        })\n    }\n\n    // on submit button click make an API call\n    handleClick = (e) => {\n        e.preventDefault();\n        this.setState({\n            userFact: '',\n            userInput: ''\n        })\n        \n        // variable used in the API call\n        // checks for which keyword showld be used in the call URL\n        let urlCallValue = '';\n    \n        if (this.state.yearIsChecked) {\n            urlCallValue = 'year';\n        } else if (this.state.dayMonthIsChecked) {\n            if (this.state.userInput.match(this.state.dayMonthPattern)) {\n                urlCallValue = 'date'\n            } else {\n                urlCallValue = 'error'\n            }\n        } else if (this.state.numberIsChecked) {\n            if (this.state.userInput.match(this.state.dayMonthPattern)) {\n                urlCallValue = 'error'\n            } \n        }\n\n        axios({\n            url: 'https://proxy.hackeryou.com',\n            dataType: 'json',\n            method:'GET',\n            params: {\n                reqUrl: `http://numbersapi.com/${this.state.userInput}/${urlCallValue}?json`,\n                xmlToJSON: false,\n            }\n        }).then( (res) => {\n            this.setState({\n                userFact: res.data\n            })\n        }).catch(() => {\n            alert('Something went wrong! Please follow the input guidelines.')\n        })\n    }\n    \n    render () {\n        return (\n            <Fragment>\n                <div className=\"optionsMenu\">\n                    <button onClick={this.handleYearCheck}>Year</button>\n                    <button onClick={this.handleDayMonthCheck}>Month/Day</button>\n                    <button onClick={this.handleNumberCheck}>Number</button>\n                </div>\n\n                {/* Check for which component to render based on the user choice */}\n                {this.state.yearIsChecked ? <YearFact handleClick={this.handleClick} handleInput={this.handleInput} userInput={this.state.userInput} /> : null}\n\n                {this.state.dayMonthIsChecked ? <DayMonthFact handleClick={this.handleClick} handleInput={this.handleInput} userInput={this.state.userInput} /> : null}\n\n                {this.state.numberIsChecked ? <NumberFact handleClick={this.handleClick} handleInput={this.handleInput} userInput={this.state.userInput} /> : null}\n\n                <p className={this.state.userFact ? 'animate' : null}>{this.state.userFact}</p>\n            </Fragment>\n        );\n    }\n}\n\nexport default AppInputForm;","import React, {Component} from 'react';\nimport './App.css';\nimport AppInputForm from './AppInputForm.js';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"wrapper\">\n        <h1>Number<span className=\"headerSpan\">licious</span></h1>\n        <ul className=\"description\">\n          <li><span>Step 1:</span> Choose the category</li>\n          <li><span>Step 2:</span> Enter a number and click \"Submit\"</li>\n          <li><span>Step 3:</span> Discover an interesting fact about your number</li>\n        </ul>\n      \n        <AppInputForm />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
{"version":3,"sources":["YearFact.js","NumberFact.js","DayMonthFact.js","AppInputForm.js","App.js","serviceWorker.js","index.js"],"names":["YearFact","handleInput","e","setState","year","target","value","handleClick","preventDefault","axios","url","state","method","dataType","then","res","console","log","yearFact","data","text","catch","alert","htmlFor","className","type","name","id","placeholder","onChange","this","onClick","Component","NumberFact","number","numberFact","DayMonthFact","dayMonth","dayMonthFact","AppInputForm","handleYearCheck","yearIsChecked","dayMonthIsChecked","numberIsChecked","handleDayMonthCheck","handleNumberCheck","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.dd7032c3.chunk.js","sourcesContent":["import React, {Component, Fragment} from 'react';\nimport axios from 'axios';\n\nclass YearFact extends Component {\n    constructor() {\n    super();\n        this.state = {\n            year: '',\n            yearFact: '',\n        }\n    }\n\n    handleInput = (e) => {\n        this.setState({\n            year: e.target.value\n        })\n    }\n\n    handleClick = (e) => {\n        e.preventDefault();\n        axios({\n            url: `http://numbersapi.com/${this.state.year}/year?json`,\n            method: 'GET',\n            dataType: 'json'\n        }).then( (res) => {\n            console.log(res);\n            this.setState({\n                yearFact: res.data.text\n            })\n        }).catch(() => {\n            alert('Invalid format, please enter numbers only')\n        })\n    }\n\n    render() {\n        return (\n            <Fragment>\n                <form>\n                    <label htmlFor=\"yearInput\" className=\"sr-only\">Year input</label>\n                    <input className=\"userInput\" type=\"text\" name=\"yearInput\" id=\"yearInput\" placeholder=\"Enter a year (YYYY)\" onChange={this.handleInput}/>\n                    <button type=\"submit\" onClick={this.handleClick}>Submit</button>\n                </form>\n                <p>{this.state.yearFact}</p>\n            </Fragment>\n        )\n    }\n}\n\nexport default YearFact","import React, {Component, Fragment} from 'react';\nimport axios from 'axios';\n\nclass NumberFact extends Component {\n    constructor() {\n    super();\n        this.state = {\n            number: '',\n            numberFact: '',\n        }\n    }\n\n    handleInput = (e) => {\n        this.setState({\n            number: e.target.value\n        })\n    }\n\n    handleClick = (e) => {\n        e.preventDefault();\n        axios({\n            url: `http://numbersapi.com/${this.state.number}/math?json`,\n            method: 'GET',\n            dataType: 'json'\n        }).then( (res) => {\n            console.log(res);\n            this.setState({\n                numberFact: res.data.text\n            })\n        }).catch(() => {\n            alert('Invalid format, please enter numbers only')\n        })\n    }\n\n    render() {\n        return (\n            <Fragment>\n                <form>\n                    <label htmlFor=\"numberInput\" className=\"sr-only\">Number input</label>\n                    <input className=\"userInput\" type=\"text\" name=\"numberInput\" id=\"numberInput\" placeholder=\"Enter a number\" onChange={this.handleInput}/>\n                    <button type=\"submit\" onClick={this.handleClick}>Submit</button>\n                </form>\n                <p>{this.state.numberFact}</p>\n            </Fragment>\n        )\n    }\n}\n\nexport default NumberFact","import React, {Component, Fragment} from 'react';\nimport axios from 'axios';\n\nclass DayMonthFact extends Component {\n    constructor() {\n    super();\n        this.state = {\n            dayMonth: '',\n            dayMonthFact: '',\n        }\n    }\n\n    handleInput = (e) => {\n        this.setState({\n            dayMonth: e.target.value\n        })\n    }\n\n    handleClick = (e) => {\n        e.preventDefault();\n        axios({\n            url: `http://numbersapi.com/${this.state.dayMonth}/date?json`,\n            method: 'GET',\n            dataType: 'json'\n        }).then( (res) => {\n            console.log(res);\n            this.setState({\n                dayMonthFact: res.data.text\n            })\n        }).catch(() => {\n            alert('Invalid format, please enter numbers only')\n        })\n    }\n\n    render() {\n        return (\n            <Fragment>\n                <form>\n                    <label htmlFor=\"dayMonthInput\" className=\"sr-only\">Day and month input</label>\n                    <input className=\"userInput\" type=\"text\" name=\"dayMonthInput\" id=\"dayMonthInput\" placeholder=\"Enter date (MM/DD)\" onChange={this.handleInput}/>\n                    <button type=\"submit\" onClick={this.handleClick}>Submit</button>\n                </form>\n                <p>{this.state.dayMonthFact}</p>\n            </Fragment>\n        )\n    }\n}\n\nexport default DayMonthFact","import React, {Component, Fragment} from 'react';\nimport YearFact from './YearFact.js'\nimport NumberFact from './NumberFact.js'\nimport DayMonthFact from './DayMonthFact.js'\n\nclass AppInputForm extends Component {\n    constructor() {\n    super();\n        this.state = {\n            year: '',\n            yearFact: '',\n            yearIsChecked: false,\n            dayMonthIsChecked: false,\n            numberIsChecked: false\n        }\n    }\n\n    handleYearCheck = () => {\n        console.log('year selected');\n        this.setState({\n            yearIsChecked: true,\n            dayMonthIsChecked: false,\n            numberIsChecked: false\n        })\n    }\n\n    handleDayMonthCheck = () => {\n        console.log('month selected');\n        this.setState({\n            yearIsChecked: false,\n            dayMonthIsChecked: true,\n            numberIsChecked: false\n        })\n    }\n\n    handleNumberCheck = () => {\n        console.log('number selected');\n        this.setState({\n            yearIsChecked: false,\n            dayMonthIsChecked: false,\n            numberIsChecked: true\n        })\n    }\n    \n    render () {\n        return (\n            <Fragment>\n                <fieldset className=\"optionsMenu\">\n                    <label htmlFor=\"year\">Year</label>\n                    <input type=\"radio\" name=\"inputOption\" id=\"year\" onChange={this.handleYearCheck}/>\n\n                    <label htmlFor=\"monthDay\">Month/Day</label>\n                    <input type=\"radio\" name=\"inputOption\" id=\"monthDay\" onChange={this.handleDayMonthCheck}/>\n\n                    <label htmlFor=\"number\">Number</label>\n                    <input type=\"radio\" name=\"inputOption\" id=\"number\" onChange={this.handleNumberCheck}/>\n                </fieldset>\n\n                {this.state.yearIsChecked ? <YearFact /> : null}\n                {this.state.dayMonthIsChecked ? <DayMonthFact /> : null}\n                {this.state.numberIsChecked ? <NumberFact /> : null}\n\n            </Fragment>\n        );\n    }\n}\n\nexport default AppInputForm;","import React, {Component} from 'react';\nimport './App.css';\nimport AppInputForm from './AppInputForm.js';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"wrapper\">\n        <h1>Numberlicious</h1>\n        <ul className=\"description\">\n          <li><span>Step 1:</span> Choose the category</li>\n          <li><span>Step 2:</span> Enter the number and click \"Submit\"</li>\n          <li><span>Step 3:</span> Discover an interesting fact about your number</li>\n        </ul>\n      \n        <AppInputForm />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
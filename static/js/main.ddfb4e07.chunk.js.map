{"version":3,"sources":["YearFact.js","NumberFact.js","DayMonthFact.js","AppInputForm.js","App.js","serviceWorker.js","index.js"],"names":["YearFact","className","htmlFor","type","name","id","placeholder","onChange","this","props","handleInput","onClick","e","handleClick","Component","NumberFact","DayMonthFact","AppInputForm","handleYearCheck","setState","yearIsChecked","dayMonthIsChecked","numberIsChecked","userFact","handleDayMonthCheck","handleNumberCheck","userInput","target","value","preventDefault","urlCallValue","state","axios","url","dataType","method","params","reqUrl","xmlToJSON","then","res","data","catch","alert","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","console","message"],"mappings":"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","file":"static/js/main.ddfb4e07.chunk.js","sourcesContent":["import React, {Component} from 'react';\n\nclass YearFact extends Component {\n    render() {\n        return (\n            <form className=\"animate\">\n                <label htmlFor=\"yearInput\" className=\"sr-only\">Year input</label>\n                <input className=\"userInput\" type=\"text\" name=\"yearInput\" id=\"yearInput\" placeholder=\"Enter a year (YYYY)\" onChange={this.props.handleInput}/>\n                <button type=\"submit\" onClick={(e) => this.props.handleClick(e)}>Submit</button>\n            </form>\n        )\n    }\n}\n\nexport default YearFact","import React, {Component} from 'react';\n\nclass NumberFact extends Component {\n    render() {\n        return (\n            <form className=\"animate\">\n                <label htmlFor=\"numberInput\" className=\"sr-only\">Number input</label>\n                <input className=\"userInput\" type=\"text\" name=\"numberInput\" id=\"numberInput\" placeholder=\"Enter a number\" onChange={this.props.handleInput}/>\n                <button type=\"submit\" onClick={(e) => this.props.handleClick(e)}>Submit</button>\n            </form>\n        )\n    }\n}\n\nexport default NumberFact","import React, {Component} from 'react';\n\nclass DayMonthFact extends Component {\n    render() {\n        return (\n            <form className=\"animate\">\n                <label htmlFor=\"dayMonthInput\" className=\"sr-only\">Day and month input</label>\n                <input className=\"userInput\" type=\"text\" name=\"dayMonthInput\" id=\"dayMonthInput\" placeholder=\"Enter date (MM/DD)\" onChange={this.props.handleInput}/>\n                <button type=\"submit\" onClick={(e) => this.props.handleClick(e)}>Submit</button>\n            </form>\n        )\n    }\n}\n\nexport default DayMonthFact","import React, {Component, Fragment} from 'react';\nimport YearFact from './YearFact.js'\nimport NumberFact from './NumberFact.js'\nimport DayMonthFact from './DayMonthFact.js'\nimport axios from 'axios';\n\nclass AppInputForm extends Component {\n    \n    constructor() {\n        super();\n        // initial state values\n        this.state = {\n            userInput: '',\n            userFact: '',\n            yearIsChecked: false,\n            dayMonthIsChecked: false,\n            numberIsChecked: false\n        }\n    }\n\n    // check which options was selected by user\n    handleYearCheck = () => {\n        this.setState({\n            yearIsChecked: true,\n            dayMonthIsChecked: false,\n            numberIsChecked: false,\n            userFact: ''\n        })\n    }\n\n    handleDayMonthCheck = () => {\n        this.setState({\n            yearIsChecked: false,\n            dayMonthIsChecked: true,\n            numberIsChecked: false,\n            userFact: ''\n        })\n    }\n\n    handleNumberCheck = () => {\n        this.setState({\n            yearIsChecked: false,\n            dayMonthIsChecked: false,\n            numberIsChecked: true,\n            userFact: '',\n        })\n    }\n    \n    // update the user input state value\n    handleInput = (e) => {\n        this.setState({\n            userInput: e.target.value\n        })\n    }\n\n    // on submit button click make an API call\n    handleClick = (e) => {\n        e.preventDefault();\n        this.setState({\n            userFact: ''\n        })\n        \n        // variable used in the API call\n        // checks for which keyword showld be used in the call URL\n        let urlCallValue = '';\n        if (this.state.yearIsChecked) {\n            urlCallValue = 'year';\n        } else if (this.state.dayMonthIsChecked) {\n            urlCallValue = 'date'\n        } else if (this.state.numberIsChecked) {\n            urlCallValue = 'math'\n        }\n        axios({\n            url: 'https://proxy.hackeryou.com',\n            dataType: 'json',\n            method:'GET',\n            params: {\n                reqUrl: `http://numbersapi.com/${this.state.userInput}/${urlCallValue}?json`,\n                xmlToJSON: false,\n            }\n        }).then( (res) => {\n            this.setState({\n                userFact: res.data\n            })\n        }).catch(() => {\n            alert('Something Went wrong! Please follow the input guideline in brackets.')\n        })\n    }\n    \n    render () {\n        return (\n            <Fragment>\n                <fieldset>\n                    <div className=\"optionsMenu\">\n                        <label htmlFor=\"year\">Year</label>\n                        <input type=\"radio\" name=\"inputOption\" id=\"year\" onChange={this.handleYearCheck}/>\n    \n                        <label htmlFor=\"monthDay\">Month/Day</label>\n                        <input type=\"radio\" name=\"inputOption\" id=\"monthDay\" onChange={this.handleDayMonthCheck}/>\n    \n                        <label htmlFor=\"number\">Number</label>\n                        <input type=\"radio\" name=\"inputOption\" id=\"number\" onChange={this.handleNumberCheck}/>\n                    </div>\n                </fieldset>\n\n                {/* Check for which component to render based on the user choice */}\n                {this.state.yearIsChecked ? <YearFact handleClick={this.handleClick} handleInput={this.handleInput} /> : null}\n\n                {this.state.dayMonthIsChecked ? <DayMonthFact handleClick={this.handleClick} handleInput={this.handleInput}/> : null}\n\n                {this.state.numberIsChecked ? <NumberFact handleClick={this.handleClick} handleInput={this.handleInput}/> : null}\n\n                <p className={this.state.userFact ? 'animate' : null}>{this.state.userFact}</p>\n            </Fragment>\n        );\n    }\n}\n\nexport default AppInputForm;","import React, {Component} from 'react';\nimport './App.css';\nimport AppInputForm from './AppInputForm.js';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"wrapper\">\n        <h1>Number<span className=\"headerSpan\">licious</span></h1>\n        <ul className=\"description\">\n          <li><span>Step 1:</span> Choose the category</li>\n          <li><span>Step 2:</span> Enter a number and click \"Submit\"</li>\n          <li><span>Step 3:</span> Discover an interesting fact about your number</li>\n        </ul>\n      \n        <AppInputForm />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}